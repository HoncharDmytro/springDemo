Spring-Core - Контейнер компонентов Spring Beans и поддерживающие утилиты (Контейнер внедрения зависимостей). Вся работа через ApplicationContext.

Spring-Beans - объекты, формирующие основу приложения и управляемые контейнером Spring IoC называются bean-компонентами. Компонент — это объект, который создается, собирается и управляется контейнером Spring IoC. Bean-компоненты и зависимости между ними отражаются в метаданных конфигурации, используемых контейнером(@Configuration или xml). @Configuration, @ImportResource, @Bean, @Component, @Import(ConfigA.class) - загрузка других конфигов(обьединение), @DependsOn
	Bean Scopes: 
		singleton(Default) - все DAO используют один и тот же источник данных в одном ApplicationContext
		prototype - все DAO получают свой собственный источник данных
		request - новый источник данных для HttpRequest
		session - новый источник данных для HttpSession
		websocket - новый источник данных для WebSocket
		application - все DAO используют один и тот же источник данных в одном ServletContext
		Пример: @PrototypeScope. 
	Параметры в @Bean: Class, Name, Scope, Constructor arguments, Properties, Autowiring mode, Lazy initialization mode, Initialization method, 		Destruction method, Description.

Spring-Context - Интерфейс ApplicationContext, пользовательский интерфейс, проверка достоверности, интерфейс JNDI, компоненты Eпterprise JavaBeaпs 	(EJB), удаленное взаимодействие и поддержка почты. Взаимодействует с spring-beans.

Spring-DАO(spring-tx) - это объект, который предоставляет абстрактный интерфейс для поддержки инфраструктуры обработки транзакций и сред реализации JDBC, т.е. Spring DAO представляет собой обобщенную концепцию для доступа к JDBC и Hibernate, MyBatis, JPA, JDO с использованием его отдельных классов поддержки. И он обеспечивает обобщенную иерархию исключений, определяя аннотацию @Repository. Эта аннотация определяет контейнер Spring для преобразования исключений SQL из SQLException в иерархию DataAccessException, не зависящую от стратегии доступа к данным Spring. УМЕР В 2008-М, ВСЕ НУЖНОЕ ПЕРЕЕХАЛО В Spring-tx!!!!!!!!!!!!!

Spring-JDBC - предоставляет JdbcDaoSupport содержащий JdbcTemplate, настраиваемый с помощью DataSource.
int nbRows = jdbcTemplate.queryForObject("select count(1) from person", Integer.class);
или
Person p = jdbcTemplate.queryForObject("select first, last from person where id=?", 
             rs -> new Person(rs.getString(1), rs.getString(2)), 
             134561351656L);

Spring-Data - модуль включающий множество вспомогательных модулей и компонентов(sub-components/modules), предоставляющий общий API для определения того, как получить доступ к данным (DAO + аннотации) более общим способом, охватывающим как источники данных SQL, так и NOSQL. JPA (SQL), Redis, Hadoop, NOSQL, ... При следовании конвенции по именованию Spring тянет название метода (findAll() и подобное) для віполнения запроса без написания самой процедуры запроса. Когда контекст приложения загружается, Spring предоставляет прокси для интерфейсов DAO, которые содержат весь шаблонный код, связанный с технологией доступа к данным, и вызывает настроенные запросы. Позволяет создание «автоматических» объектов доступа к данным (DAO) во время компиляции и использует ORM (например, Hibernate) в этих DAO, из DAO интерфейса создается прокси класс (daoImplementation из папки Repository). @EnableJpaRepositories, @Query(JMS)
	@Controller
	public class FooController {
  
  	@Autowired
  	private FooRepository fooRepository; спринг сам все создаст, главное знать откуда!

  	@RequestMapping("/")
  	@ResponseBody
  	Foo getFoo() {
    		return fooRepository.findOne(1L);
 	   }
	}
spring-data-jpa тянет за собой зависимости: eclipse.persistence.jpa, hibernate-core, spring-orm, spring-context, spring-aop, spring-tx, pring-beans, 
	spring-core, spring-aspects, spring-data-commons.

В Spring есть соответствующий менеджер транзакций для локальных транзакций и JTA, если нужны распределенные транзакции. boot-starter-jta

Spring ORM - модуль включающий множество вспомогательных модулей и компонентов(sub-components/modules), который охватывает многие технологии сохранения, а именно Java Persistence API (JPA), Java Data Objects (JDO), Hibernate и iBATIS, ЯВЛЯЕТСЯ МОСТОМ МЕЖДУ СПРИНГ И ТЕХНОЛОГИЯМИ, ДЛЯ САМИХ ТЕХНОЛОГИЙ НЕОБХОДИМО ПОДКЛЮЧАТЬ СООТВЕТСТВУЮЩИЕ БИБЛИОТЕКИ ОТДЕЛЬНО!!!!!. Предоставляет интерфейсы SessionFactory для Hibernate,
EntityManagerFactory для JPA, SqlSessionFactory для MyBatis.

Spring EXPRESSION - Содержит все классы для поддержки SpEL (Spring Expression Language - язык выражений Spring).

Spring OXM - Обеспечивает поддержку ОХМ (Object/XML Mappiпg - взаимное преобразование объектов и данных формата XML, применяется при обмене данными с другими приложениями). В этот модуль упакованы классы, предназначенные для абстрагирования маршализации и демаршализации данных формата XML, а также для поддержки таких распространенных инструментальных средств, как Castor, JAXB, XMLBeaпs и XStream.

SPRING BOOT JPA ИСПОЛЬЗУЕТ ЗАЧАСТУЮ СВЯЗКУ: spring-boot-starter-data-jpa + hibernate-entitymanager + hibernate-core.

Spring АОР - Реализация аспектно-ориентированного программирования (АОП), согласованная с набором интерфейсов АОР Alliance. Реализация сквозного функционала(логирование, тестирование, отлов ошибок и тд)

Spring Web - Базовые средства интеграции, включая составные функциональные средства, инициализацию контекста с помощью приемников сервлетов и web-ориентированный контекст приложений.

Spring Web МVС - Каркас для построения веб-приложений по проектному шаблону "модель-представление-контроллер" (Model-View-Controler - MVC). Построен на API сервлетов и использует архитектуру синхронного блокирующего ввода-вывода с моделью «один запрос на поток».

Spring Batch - реализует стандарт JSR-352, предоставляет интерфейс для пакетной обработки данных (платформа для разработки пакетных приложений). Например – конвертация данных из одной базы в другую, из файла в базу, из брокера сообщений в файл и т.д. и т.п. Эти задания могут выполняться разово или по расписанию.
Spring Batch подойдёт для приложений с многократно используемыми функциями, чтобы обрабатывать большие объёмы записей. Среди таких функций — ведение логов и трассировка, управление транзакциями, статистика обработки заданий, перезапуск и пропуск заданий, управление ресурсами и другие.

Spring Security - аутентификация, авторизация и контроль доступа. Защита от атак типа фиксация сессии, кликджекинг, межсайтовая подделка запроса и др.

Spring Integration - фреймворк шаблонов интеграции корпоративных приложений (EIP) - микросервисы? Используюет под капотом механизмы обмена сообщениями между адаптерами различных протоколов/систем интеграции на основе каналов сообщений (условные очереди). Spring Integration подключается к проекту, если вам нужно связать POJO (Plain Old Java Object) с помощью парадигмы обмена сообщениями без внедрения зависимостей (DI). Также Integration позволяет взаимодействовать с внешними системами с помощью адаптеров каналов и шлюзов. Адаптеры каналов используются для односторонней интеграции (отправка или получение), а шлюзы — для сценариев запроса / ответа (входящего или исходящего).

Spring WebFlux — веб-платформа, созданная, чтобы по максимуму использовать преимущества современных многоядерных процессоров и обрабатывать огромное количество одновременных подключений.

В Spring Boot также можно опционально подключить библиотеку Reactor для создания реактивных систем на JVM.

Spring Cloud - работа с облачными сервисами.

Spring Cloud Data Flow нужен приложениям, в которых используется потоковая передача и пакетная обработка данных. Нужен для Cloud Foundry и Kubernetes.



<context: component-scan>, @ComponentScan ищут везде @Component, @Controller, @Repository и @Service, а также @Autowired и @Inject!!!!
<context: exclude-filter type="assignable" expression="com.example.NotAService"/> - исключает из поиска.


 ApplicationContext ctx = new AnnotationConfigApplicationContext(someConfigClass);
           Environment env = ctx.getEnvironment();

Среда также состоит из профилей, то есть профилей «dev» или «production» !!!!!!!!	


Chapter 03 Inversion of Control(IoC):

Типы инверсии управления: 
		1. поиск зависимостей(Dependency Lookup, DL) - компонент должен получить ссылку на зависимость, подтипы: извлечение зависимостей и 															контекстный поиск зависимостей (CDL).
		2. внедрения зависимостей(Dependency Injection, DI) - зависимости внедряются в компонент контейнером инверсии управления, подтипы:  															через конструктор, через метод установки, через поле.

	DefaultListableBeanFactory factory = new DefaultListableBeanFactory();
	XmlBeanDefinitionReader rdr = new XmlBeanDefinitionReader(factory); //OR// PropertiesBeanDefinitionReader //OR// DefaultListableBeanFactory
	rdr.loadBeanDefinitions(new ClassPathResource("spring/xml-bean-factory-config.xml"));
	Oracle oracle = (Oracle) factory.getBean("oracle");

	GenericXmlApplicationContext ctx = new GenericXmlApplicationContext();
	ctx.load("classpath:spring/app-context-annotation.xml");
	ctx.refresh();
	MessageProvider messageProvider = ctx.getBean("provider", MessageProvider.class);
	
	GenericXmlApplicationContext
	GenericApplicationContext
	AnnotationConfigApplicationContext
	AnnotationConfigWebApplicationContext
 	ConfigurationClassPostProcessor
	ClassPathXmlApplicationContext
	ApplicationContext

	PropertiesBeanDefinitionReader
	XmlBeanDefinitionReader

	PropertySourcesPlaceholderConfigurer

	@Configuration
 	@ImportResource("classpath:/com/acme/database-config.xml")
 	public class AppConfig {
     		@Inject DataSource dataSource; // from XML // or  @Autowired DataSource dataSource;
    		@Bean
     		public MyBean myBean() {
         		// inject the XML-defined dataSource bean
         		return new MyBean(this.dataSource);
     		}
 	}

	<bean id="targetByName" autowire="byName"// autowire="byType" // autowire="constructor"
	class="com.apress.prospring5.ch3.xml.Target"
	lazy-init="true"/>


Chapter 04 Configuration, context and Bean life cycle:

	<bean id="singerOne"
	class="com.apress.prospring5.ch4.Singer"
	init-method="init" p:name="John Mayer" p:age="39"/>

	interfaces InitializingBean, DisposableBean; afterPropertiesSet(){}, destroy(){} 

	@PostConstruct
	public void init() {
		//initialisation that performed after constructor is called
	}

	@PreDestroy
	public void destroy() {
		//some action doing with bean destruction
	}

	@Lazy
	@Bean(initMethod = "init")
	Singer singerOne() {
		Singer singerOne = new Singer();
		singerOne.setName("John Mayer");
		singerOne.setAge(39);
		return singerOne;
	}

	<context:annotation-config/>
	<bеаn id="destructiveBean"
		class="com.apress.prospring5.ch4.DestructiveBeanWithJSR250"
		p:filePath="#(systemProperties'java.io.tmpdir')
		#(systemProperties'file.separator')test.txt"/>

	org.springframework.core.io.Resource : contentLength (), exists (), getDescription (),
	getFile (), getFileName (), getURI (), getURL (), isOpen (), isReadable (), lastModified() 
	and createRelative()

	File file = File.createTempFile("test", "txt");
	file.deleteOnExit();
	Resource resl = ctx.getResource("file://" + file.getPath());
	Resource res2 = ctx.getResource("classpath:test.txt");
	Resource resЗ = ctx.getResource("http://www.google.com");

	@Autowired
	Environment env;
	ConfigurableEnvironment env;

Chater 05 Aspect-oriented programming(AOP), (JDK dynamic proxy, Cglib(default) and AspectJ):

	pass


Chapter 06 JDBC, Spring Data:

	DriverManagerDataSource не поддерживается пул соединений с базой данных, только для тестирования, конфигурация:
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:driverClassName="${jdbc.driverClassName}"
		p:url="$(jdbc.url)"
		p:username="${jdbc.username}" //jdbc.user in pg
		p:password="${jdbc.password}"/>
	<context:property-placeholder location="classpath:db/jdbc.properties"/> //OR// <util:properties id="jdbc" location="classpath:db/jdbc2.properties"/>
	//jdbc.driverClassName=com.mysql.cj.jdbc.Driver
	//jdbc.url= jdbc:mysql://localhost:3306/musicdb?useSSL=true
	//jdbc.username=name
	//jdbc.password=pass
	
	В реальных приложениях используй нормальный источник данных, например BasicDataSource(Project Apache Commons):
		<bean id="dataSource"
			class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close"
			---

	Можно воспользоватся пулом соединений контейнера через интерфейс JNDI:
		<bean id="dataSource"
			class="org.springframework.jndi.JndiObjectFactoryBean" //OR// <jee:jndi-lookup jndi-name="java:comp/env/jdbc/musicdb" />
			p:jndiName="java:comp/env/jdbc/musicdb"/>
			<root-node>
				<resource-ref>
					<res-ref-name>jdbc/musicdb</res-ref-name>
					<res-type>javax.sql.DataSource</res-type>
					<res-auth>Container</res-auth>
				</resource-ref>
			</root-node>		
	
Chapter 07 Hibernate:

	All in module 7.


Chapter 08 JPA:

	EntityManagerFactory -> EntityManager интерфейс, занимается поддержкой контекста сохраняемости, в котором будут храниться все экземпляры сущностей, управляемые этим контекстом. Аналог SessionFactory -> Session из Hibernate.
	HQL -> JPQL языки запросов.
	Есть три типа конфигурации: 
		1. LocalEntityManagerFactoryBean - не поддерживается внедрение источника данных, а следовательно, нельзя принимать участие в 					глобальных транзакциях.
		2. JNDI - применяется для совместимого с платформой JEE 6 контейнера, в который сервер приложений производит начальную загрузку 				единицы сохраняемости JPA на основе информации в дескрипторах развертывания. Конфигурация віполняется в META-INF/persistence.xml
		3. LocalContainerEntityManagerFactoryBean - поддерживается внедрение источника данных и допускается участие как в локальных, так и 				в глобальных транзакциях.
	
	Запрашивание результатов специального типа с помощью выражения конструктора с помощью JPQL: em(EntityManager)
		public List<SingerSummary> findAll () {
			List<SingerSummary> result = em.createQuery("select new com.apress.prospring5.ch8.view.SingerSumrnary("s.firstName,"
				+ " s.lastName, a.title) from Singer s "
				+ "left join s.albums а where a.releaseDate="
				+ "(select max(a2.releaseDate) :"
				+ "from Album а2 where a2.singer.id = s.id)", SingerSummary.class).getResultList();
			return result;
		}
	
	Выборка: Album album = singer.getAlbums().stream().filter(a -> a.getTitle().equals("Battle Studies")).findFirst().get();
	
	Выборка с помощью собственных запросов(native query):
		final static String ALL_SINGER_NATIVE_QUERY = "select id, first name, last_name, Ьirth_date, version from singer";
		public List<Singer> findAllByNativeQuery() {
			return em.createNativeQuery(ALL_SINGER_NATIVE_QUERY,Singer.class).getResultList();
		}
	
	Собственный запрос с преобразованием результирующего набора SQL:
		@Entity
		@TaЬle(name = "singer")
		@SqlResultSetMapping { (name="singerResult", entities=@EntityResult(entityClass=Singer.class) }
		public class Singer implements Serializable { ... }

	Criteria API:
		?
		?
		?
		?
		?
		org.hibernate.jpamodelgen.JPAМetaModelEntityProcessor
	
Chapter 09 Transactions:

	Для транзакций и управления ими в каркасе Spring вместе с интерфейсом PlatformTransactionManager применяются интерфейсы TransactionDefinition и 	TransactionStatus.

	Транзакции обладают четырьмя хорошо известными свойствами ACID (atomicity, coпsisteпcy, isolation, durabllity - атомарность, согласованность, 		изолированность, долговечность), и за их поддержку отвечают транзакционные ресурсы.

	TransactionDefinition.ISOLAТION SERIALIZABLE
	getPropagationBehavior(PROPAGATION_REQUIRED)

	ISOLATION_DEFAULT - Использует уровень изоляции базы данных.
	ISOLATION_READ_UNCOММITTED - Самый низкий уровень изоляции, имеет доступ к не закомиченным данным(грязное чтение).
	ISOLATION_READ_СОММIТТЕD - Стандартный уровень изоляции в большинстве баз данных. Гарантируется, что другие транзакции не могут 				читать не закомиченные данные(грязное чтение). Данные, прочитанные в одной транзакции, могут быть обновлены в других транзакциях(работа с 			динамическими данными).
	ISOLATION_REPEATAВLE_READ - Прочитанные данные могут менятся паралельными транзакциями но внутри самой транзакции изменения не будут видны(что прочел 	в начале, с тем и работай).
	ISOLATION_SERIALIZAВLE - Параллельная транзакция не может ни изменить, ни удалить, ни вставить новые строки(Блокировка).

	Режимы распространения транзакций:
	PROPAGATION_REQUIRED - Поддерживает транзакцию, если она уже существует. А если транзакция отсутствует, то начинается новая транзакция.
	PROPAGATION_SUPPORTS - Поддерживает транзакцию, если она уже существует. А если транзакция отсутствует, то выполнение осуществляется без транзакций.
	PROPAGATION_МANDATORY - Поддерживает транзакцию, если она уже существует. А если активная транзакция отсутствует, то генерируется исключение.
	PROPAGATION_REQUIRES_NEW - Всегда начинает новую транзакцию. Если активная транзакция уже существует, она приостанавливается.
	PROPAGATION_NOT_SUPPORTED - Не поддерживает выполнение с активной транзакцией. Всегда выполняется без транзакций и приостанавливает любые 			существующие транзакции.
	PROPAGATION_NEVER - Всегда выполняется без транзакций, даже если имеется активная транзакция. Если же активная транзакция существует, генерируется 		исключение.
	PROPAGATION_NESTED - Выполняется во вложенной транзакции, если существует активная транзакция. А если активная транзакция отсутствует, то выполняется 	так, как будто установлено значение PROPAGATION REQUIRED.
	
	TransactionStatus - setRollbackOnly() - откат, flush() - слияние.

	

	



	







